#summary Qizmt Reference recordset Methods
#labels Qizmt,Reference,Memory,Management,recordset,Methods
<wiki:comment>Image:</wiki:comment><img src="http://qizmt.googlecode.com/svn/wiki/images/Qizmt_logo_small.png" alt="Qizmt logo (small)" />

Back to <wiki:comment>Link:</wiki:comment>[Main Wiki Main] / [MySpaceQizmtReference MySpace Qizmt Reference]

<wiki:toc max_depth="2" />

=Non-static methods of `recordset`=



==`PutInt32`==
{{{public void PutInt32(Int32 x)}}}

Put a Int32 x into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    //i,i,l,s,i
    //61,92,383,Washington,595
    mstring ms = mstring.Prepare(line);

    int i1 = ms.CsvNextItemToInt32();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    mstring s = ms.CsvNextItemToString();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutString(s);
    rValue.PutInt32(i4);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutInt`==
{{{public void PutInt(Int32 x)}}}

Put a Int32 x into the recordset.
====Remarks====
This is equivalent to PutInt32(Int32 x).

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    //i,i,l,s,i
    //61,92,383,Washington,595
    mstring ms = mstring.Prepare(line);

    int i1 = ms.CsvNextItemToInt32();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    mstring s = ms.CsvNextItemToString();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt(i1);
    rKey.PutInt(i2);

    rValue.PutInt64(i3);
    rValue.PutString(s);
    rValue.PutInt(i4);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutUInt32`==
{{{public void PutUInt32(UInt32 x)}}}

Put a UInt32 x into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    mstring ms = mstring.Prepare(line);

    int i1 = ms.NextItemToInt32(',');
    int i2 = ms.NextItemToInt32(',');
    Int64 i3 = ms.NextItemToInt64(',');
    mstring s = ms.NextItemToString(',');
    UInt32 i4 = ms.NextItemToUInt32(',');

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutString(s);
    rValue.PutUInt32(i4);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutUInt`==
{{{public void PutUInt(UInt32 x)}}}

Put a UInt32 x into the recordset.
====Remarks====
This is equivalent to PutUInt32. 

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    mstring ms = mstring.Prepare(line);

    int i1 = ms.NextItemToInt32(',');
    int i2 = ms.NextItemToInt32(',');
    Int64 i3 = ms.NextItemToInt64(',');
    mstring s = ms.NextItemToString(',');
    UInt32 i4 = ms.NextItemToUInt32(',');

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutString(s);
    rValue.PutUInt(i4);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutInt64`==
{{{public void PutInt64(Int64 x)}}}

Put a Int64 x into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    //i,i,l,s,i
    //61,92,383,Washington,595
    mstring ms = mstring.Prepare(line);

    int i1 = ms.CsvNextItemToInt32();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    mstring s = ms.CsvNextItemToString();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutString(s);
    rValue.PutInt32(i4);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutLong`==
{{{public void PutLong(Int64 x)}}}

Put a Int64 x into the recordset.
====Remarks====
This is equivalent to PutInt64(Int64 x).

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    //i,i,l,s,i
    //61,92,383,Washington,595
    mstring ms = mstring.Prepare(line);

    int i1 = ms.CsvNextItemToInt32();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    mstring s = ms.CsvNextItemToString();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutLong(i3);
    rValue.PutString(s);
    rValue.PutInt32(i4);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutUInt64`==
{{{public void PutUInt64(UInt64 x)}}}

Put a UInt64 x into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    mstring ms = mstring.Prepare(line);

    int i1 = ms.NextItemToInt32(',');
    int i2 = ms.NextItemToInt32(',');
    Int64 i3 = ms.NextItemToInt64(',');
    mstring s = ms.NextItemToString(',');
    UInt64 i4 = ms.NextItemToUInt64(',');

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutString(s);
    rValue.PutUInt64(i4);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutULong`==
{{{public void PutULong(UInt64 x)}}}

Put a UInt64 x into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    mstring ms = mstring.Prepare(line);

    int i1 = ms.NextItemToInt32(',');
    int i2 = ms.NextItemToInt32(',');
    Int64 i3 = ms.NextItemToInt64(',');
    mstring s = ms.NextItemToString(',');
    UInt64 i4 = ms.NextItemToUInt64(',');

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutString(s);
    rValue.PutULong(i4);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutDouble`==
{{{public void PutDouble(double x)}}}

Put a double x into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    mstring ms = mstring.Prepare(line);

    double x = ms.CsvNextItemToDouble();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    mstring s = ms.CsvNextItemToString();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutDouble(x);
    rKey.PutInt32(i2);

    rValue.PutLong(i3);
    rValue.PutString(s);
    rValue.PutInt32(i4);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutString`==
{{{public void PutString(mstring s)}}}

Put a mstring s into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    //i,i,l,s,i
    //61,92,383,Washington,595
    mstring ms = mstring.Prepare(line);

    int i1 = ms.CsvNextItemToInt32();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    mstring s = ms.CsvNextItemToString();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutString(s);
    rValue.PutInt32(i4);

    output.Add(rKey, rValue);
} 
}}}
----



{{{public void PutString(string s)}}}

Put a string s into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    //i,i,l,i
    //61,92,383,595
    mstring ms = mstring.Prepare(line);

    int i1 = ms.CsvNextItemToInt32();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutString("--");
    rValue.PutInt32(i4);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutChar`==
{{{public void PutChar(char c)}}}

Put a char c into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    //i,i,l,i
    //61,92,383,595
    mstring ms = mstring.Prepare(line);

    int i1 = ms.CsvNextItemToInt32();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutString('-');
    rValue.PutInt32(i4);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutBool`==
{{{public void PutBool(bool o)}}}

Put a boolean o into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    //i,i,l,i
    //61,92,383,595
    mstring ms = mstring.Prepare(line);

    int i1 = ms.CsvNextItemToInt32();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);

    if (i3 > 80)
    {
        rValue.PutBool(true);
    }
    else
    {
        rValue.PutBool(false);
    }

    rValue.PutInt32(i4);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutDateTime`==
{{{public void PutDateTime(DateTime x)}}}

Put the DateTime item x into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    string sLine = line.ToString();
    DateTime dt = DateTime.Parse(sLine);
    recordset key = recordset.Prepare();
    key.PutDateTime(dt);
    output.Add(key, recordset.Prepare());
} 
}}}
----



==`PutInt16`==
{{{public void PutInt16(Int16 x)}}}

Put a Int16 x into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    //i,i,l,i
    //61,92,383,595
    mstring ms = mstring.Prepare(line);

    int i1 = ms.CsvNextItemToInt32();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutInt32(i4);

    Int16 m = (Int16)(i1 % 10);
    rValue.PutInt16(m);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutShort`==
{{{public void PutShort(Int16 x)}}}

Put a Int16 x into the recordset.
====Remarks====
This is equivalent to PutInt16.  The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    //i,i,l,i
    //61,92,383,595
    mstring ms = mstring.Prepare(line);

    int i1 = ms.CsvNextItemToInt32();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutInt32(i4);

    Int16 m = (Int16)(i1 % 10);
    rValue.PutShort(m);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutUInt16`==
{{{public void PutUInt16(UInt16 x)}}}

Put a UInt16 x into the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    //i,i,l,i
    //61,92,383,595
    mstring ms = mstring.Prepare(line);

    int i1 = ms.CsvNextItemToInt32();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutInt32(i4);

    Int16 m = (Int16)(i1 % 10);
    rValue.PutUInt16(m);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutUShort`==
{{{public void PutUShort(UInt16 x)}}}

Put a UInt16 x into the recordset.
====Remarks====
This is equivalent to PutUInt16.  The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    //i,i,l,i
    //61,92,383,595
    mstring ms = mstring.Prepare(line);

    int i1 = ms.CsvNextItemToInt32();
    int i2 = ms.CsvNextItemToInt32();
    Int64 i3 = ms.CsvNextItemToInt64();
    int i4 = ms.CsvNextItemToInt32();

    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutInt32(i1);
    rKey.PutInt32(i2);

    rValue.PutInt64(i3);
    rValue.PutInt32(i4);

    Int16 m = (Int16)(i1 % 10);
    rValue.PutUShort(m);

    output.Add(rKey, rValue);
} 
}}}
----



==`PutBytes`==
{{{public void PutBytes(IList<byte> bytes, int byteIndex, int byteCount)}}}

Put bytes into the recordset, starting at byteIndex, with byteCount number of bytes to put.

====Example==== 
{{{
byte[] buf = new byte[4];
public virtual void Map(ByteSlice line, MapOutput output)
{
    mstring sLine = mstring.Prepare(line);
    int x = sLine.NextItemToInt(',');
    Entry.ToBytes(x, buf, 0);
    recordset rKey = recordset.Prepare();
    recordset rValue = recordset.Prepare();

    rKey.PutBytes(buf, 0, 2);

    output.Add(rKey, rValue);
} 
}}}
----



==`GetInt32`==
{{{public Int32 GetInt32()}}}

Get the next Int32 from the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        Int64 i3 = rValue.GetInt64();
        mstring s = rValue.GetString();
        int i4 = rValue.GetInt32();
        mstring delimiter = mstring.Prepare(",");

        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetInt`==
{{{public Int32 GetInt()}}}

Get the next Int32 from the recordset.
====Remarks====
This is equivalent to GetInt32().

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt();
    int i2 = rKey.GetInt();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        Int64 i3 = rValue.GetInt64();
        mstring s = rValue.GetString();
        int i4 = rValue.GetInt();
        mstring delimiter = mstring.Prepare(",");

        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetUInt32`==
{{{public UInt32 GetUInt32()}}}

Get the next UInt32 from the recordset.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        Int64 i3 = rValue.GetInt64();
        mstring s = rValue.GetString();
        UInt32 i4 = rValue.GetUInt32();
        mstring delimiter = mstring.Prepare(",");

        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetUInt`==
{{{public UInt32 GetUInt()}}}

Get the next UInt32 from the recordset.
====Remarks====
This is equivalent to GetUInt32.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        Int64 i3 = rValue.GetInt64();
        mstring s = rValue.GetString();
        UInt32 i4 = rValue.GetUInt();
        mstring delimiter = mstring.Prepare(",");

        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetInt64`==
{{{public Int64 GetInt64()}}}

Get the next Int64 from the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        Int64 i3 = rValue.GetInt64();
        mstring s = rValue.GetString();
        int i4 = rValue.GetInt32();
        mstring delimiter = mstring.Prepare(",");

        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetLong`==
{{{public Int64 GetLong()}}}

Get the next Int64 from the recordset.
====Remarks====
This is equivalent to GetInt64().

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        Int64 i3 = rValue.GetLong();
        mstring s = rValue.GetString();
        int i4 = rValue.GetInt32();
        mstring delimiter = mstring.Prepare(",");

        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetUInt64`==
{{{public UInt64 GetUInt64()}}}

Get the next UInt64 from the recordset.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        UInt64 i3 = rValue.GetUInt64();
        mstring s = rValue.GetString();
        int i4 = rValue.GetInt32();
        mstring delimiter = mstring.Prepare(",");

        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
}
 
}}}
----



==`GetULong`==
{{{public UInt64 GetULong()}}}

Get the next UInt64 from the recordset.
====Remarks====
This is eqivalent to GetUInt64.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        UInt64 i3 = rValue.GetULong();
        mstring s = rValue.GetString();
        int i4 = rValue.GetInt32();
        mstring delimiter = mstring.Prepare(",");

        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetDouble`==
{{{public Int64 GetDouble()}}}

Get the next double from the recordset.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        double i3 = rValue.GetDouble();
        mstring s = rValue.GetString();
        int i4 = rValue.GetInt32();
        mstring delimiter = mstring.Prepare(",");

        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetBytes`==
{{{public void GetBytes(IList<byte> buffer, int offset, int byteCount)}}}

Get the next byteCount number of bytes from the recordset, and put into buffer, starting at offset.

====Example==== 
{{{
byte[] buf = new byte[10];
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        rValue.GetBytes(buf, 0, 10);
    }

    //...
} 
}}}
----



==`GetDateTime`==
{{{public DateTime GetDateTime()}}}

Get the next DateTime item from the recordset.

====Example==== 
{{{
public override void Reduce(ByteSlice key, ByteSliceList values, ReduceOutput output)
{
    recordset rkey = recordset.Prepare(key);
    DateTime dt = rkey.GetDateTime();
    output.Add(mstring.Prepare(dt.ToString("yyyy-MM-dd hh:mm:ss")));
} 
}}}
----



==`GetString`==
{{{public mstring GetString()}}}

Get the next mstring from the recordset.
====Remarks====
The order of putting and getting items from the recordset must be the same.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        Int64 i3 = rValue.GetInt64();
        mstring s = rValue.GetString();
        int i4 = rValue.GetInt32();
        mstring delimiter = mstring.Prepare(",");

        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetChar`==
{{{public char GetChar()}}}

Get the next char from the recordset.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        double i3 = rValue.GetDouble();
        char s = rValue.GetChar();
        int i4 = rValue.GetInt32();
        mstring delimiter = mstring.Prepare(",");

        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetBool`==
{{{public bool GetBool()}}}

Get the next Boolean from the recordset.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        double i3 = rValue.GetDouble();
        char s = rValue.GetChar();
        int i4 = rValue.GetInt32();
        bool b = rValue.GetBool();

        if (b)
        {
            mstring delimiter = mstring.Prepare(",");
            ms.Consume(ref s);
            ms.Consume(ref delimiter);
        }
    }

    output.Add(ms);
} 
}}}
----



==`GetInt16`==
{{{public Int16 GetInt16()}}}

Get the next Int16 from the recordset.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        Int16 i3 = rValue.GetInt16();
        char s = rValue.GetChar();
        int i4 = rValue.GetInt32();

        mstring delimiter = mstring.Prepare(",");
        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetShort`==
{{{public Int16 GetShort()}}}

Get the next Int16 from the recordset.
====Remarks====
This is equivalent to GetInt16.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        Int16 i3 = rValue.GetShort();
        char s = rValue.GetChar();
        int i4 = rValue.GetInt32();

        mstring delimiter = mstring.Prepare(",");
        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetUInt16`==
{{{public UInt16 GetUInt16()}}}

Get the next UInt16 from the recordset.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        UInt16 i3 = rValue.GetUInt16();
        char s = rValue.GetChar();
        int i4 = rValue.GetInt32();

        mstring delimiter = mstring.Prepare(",");
        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`GetUShort`==
{{{public UInt16 GetUShort()}}}

Get the next UInt16 from the recordset.
====Remarks====
This is equivalent to GetUInt16.

====Example==== 
{{{
public override void Reduce(ByteSlice key, RandomAccessEntries values, RandomAccessOutput output)
{
    recordset rKey = recordset.Prepare(key);

    int i1 = rKey.GetInt32();
    int i2 = rKey.GetInt32();

    mstring ms = mstring.Prepare();

    for (int i = 0; i < values.Length; i++)
    {
        recordset rValue = recordset.Prepare(values[i].Value);

        UInt16 i3 = rValue.GetUShort();
        char s = rValue.GetChar();
        int i4 = rValue.GetInt32();

        mstring delimiter = mstring.Prepare(",");
        ms.Consume(ref s);
        ms.Consume(ref delimiter);
    }

    output.Add(ms);
} 
}}}
----



==`ToByteSlice`==
{{{public ByteSlice ToByteSlice()}}}

Converts this recordset to a ByteSlice.  This recordset is changed after the conversion.
====Remarks====
It is adivsed not to re-use the recordset after it has been converted to a ByteSlice.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    mstring sLine = mstring.Prepare(line);
    int x = sLine.NextItemToInt(',');
    int y = sLine.NextItemToInt(',');
    mstring name = sLine.NextItemToString(',');

    recordset key = recordset.Prepare();
    key.PutInt(x);
    key.PutInt(y);

    recordset value = recordset.Prepare();
    value.PutString(name);

    ByteSlice bKey = key.ToByteSlice(10);
    ByteSlice bValue = value.ToByteSlice();

    output.Add(bKey, bValue);
} 
}}}
----



{{{public ByteSlice ToByteSlice(int size)}}}

Converts this recordset to a ByteSlice of length = size.   Padding will occur if the recordset if smaller than size.  If the recordset is bigger than size, it will throw an exception.  This recordset is changed after the conversion.
====Remarks====
It is adivsed not to re-use the recordset after it has been converted to a ByteSlice.

====Example==== 
{{{
public virtual void Map(ByteSlice line, MapOutput output)
{
    mstring sLine = mstring.Prepare(line);
    int x = sLine.NextItemToInt(',');
    int y = sLine.NextItemToInt(',');
    mstring name = sLine.NextItemToString(',');

    recordset key = recordset.Prepare();
    key.PutInt(x);
    key.PutInt(y);

    recordset value = recordset.Prepare();
    value.PutString(name);

    ByteSlice bKey = key.ToByteSlice(10);
    ByteSlice bValue = value.ToByteSlice();

    output.Add(bKey, bValue);
} 
}}}