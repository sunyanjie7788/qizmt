<SourceCode>
  <Jobs>
    <Job Name="Preprocessing" Custodian="" email="">
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            Shell(@"Qizmt -dfs del regression_test_cvlib.CvSobel_Input.blob");
            Shell(@"Qizmt -dfs del regression_test_cvlib.CvSobel_Output.blob");
            Shell(@"Qizmt -dfs del regression_test_cvlib.CvSobel_Output2.blob");
        }
        ]]>
      </Local>
    </Job>
    <Job Name="Create sample data" Custodian="" email="">      
      <IOSettings>
        <JobType>remote</JobType>
        <DFS_IO>
          <DFSReader></DFSReader>
          <DFSWriter>dfs://regression_test_cvlib.CvSobel_Input.blob</DFSWriter>
        </DFS_IO>
      </IOSettings>
      <Remote>
        <![CDATA[
          public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
          {             
                //Create sample image.
                string pic64 = @"Qk1mDAAAAAAAADYAAAAoAAAAIgAAAB4AAAABABgAAAAAADAMAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wAA////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////AAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////////8AAAD///////////////////////////8AAP///////////////////////wAAAP///////////////////////////////////////////////////////////////////////////wAAAP///////////////////////////wAA////////////////////////AAAA////////////////////////////////////////////////////////////////////////////AAAA////////////////////////////AAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////////8AAAD///////////////////////////8AAP///////////////////////wAAAP///////////////////////////////////////////////////////////////////////////wAAAP///////////////////////////wAA////////////////////////AAAA////////////////////////////////////////////////////////////////////////////AAAA////////////////////////////AAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////////8AAAD///////////////////////////8AAP///////////////////////wAAAP///////////////////////////////////////////////////////////////////////////wAAAP///////////////////////////wAA////////////////////////AAAA////////////////////////////////////////////////////////////////////////////AAAA////////////////////////////AAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////////8AAAD///////////////////////////8AAP///////////////////////wAAAP///////////////////////////////////////////////////////////////////////////wAAAP///////////////////////////wAA////////////////////////AAAA////////////////////////////////////////////////////////////////////////////AAAA////////////////////////////AAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////////8AAAD///////////////////////////8AAP///////////////////////wAAAP///////////////////////////////////////////////////////////////////////////wAAAP///////////////////////////wAA////////////////////////AAAA////////////////////////////////////////////////////////////////////////////AAAA////////////////////////////AAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////////8AAAD///////////////////////////8AAP///////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////wAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wAA";
                
                byte[] data = Convert.FromBase64String(pic64);
                string imgName = "rectangle.bmp";
                Blob blob = Blob.Prepare(imgName, data);                
                dfsoutput.WriteBinary(blob);          
           }
        ]]>
      </Remote>
    </Job>
    <Job Name="M/R" Custodian="" email="">
       <OpenCVExtension/>      
      <IOSettings>
        <JobType>mapreduce</JobType>
        <KeyLength>260</KeyLength>
        <DFSInput>dfs://regression_test_cvlib.CvSobel_Input.blob</DFSInput>
        <DFSOutput>dfs://regression_test_cvlib.CvSobel_Output.blob</DFSOutput>
        <OutputMethod>sorted</OutputMethod>
      </IOSettings>
      <MapReduce>
        <Map>
          <![CDATA[
          public virtual void Map(ByteSlice line, MapOutput output)
          {
                Blob blob = line.ReadBinary();
                string imgName = blob.name;
                byte[] data = blob.data;
                
                mstring key = mstring.Prepare(imgName);
                recordset value = recordset.Prepare();
                value.PutBytes(data, 0, data.Length);
                
                output.Add(key, value);
          }
        ]]>
        </Map>
        <ReduceInitialize>
          <![CDATA[
          public void ReduceInitialize() { }
        ]]>
        </ReduceInitialize>
        <Reduce>
          <![CDATA[
          public override void Reduce(ByteSlice key, ByteSliceList values, ReduceOutput output)
          {
              string imgName = mstring.Prepare(UnpadKey(key)).ToString();
              byte[] data = values[0].Value.ToBytes();
              
              System.IO.MemoryStream ms = new System.IO.MemoryStream(data);
              System.Drawing.Bitmap srcBmp = new System.Drawing.Bitmap(ms);
              ms.Close();
              
              byte[] sobel = Sobel(srcBmp);
              srcBmp = null;
              
              Blob blob = Blob.Prepare("sobel.bmp", sobel);
              output.AddBinary(blob);
          }
          
          private byte[] Sobel(System.Drawing.Bitmap srcBmp)
        {
            openCV.IplImage image = openCV.cvlib.ToIplImage(srcBmp, false);

            openCV.IplImage sobel = openCV.cvlib.CvCloneImage(ref image);

            // process the image
            openCV.cvlib.CvSobel(ref image, ref sobel, 1, 1, 1);

            System.Drawing.Bitmap bmp = openCV.cvlib.ToBitmap(sobel, false);
            System.IO.MemoryStream ms = new System.IO.MemoryStream();
            bmp.Save(ms, System.Drawing.Imaging.ImageFormat.Bmp);
            byte[] result = ms.ToArray();
            ms.Close();
            ms = null;
            bmp = null;

            if (image.imageData != IntPtr.Zero)
            {
                openCV.cvlib.CvReleaseImage(ref image);
            }
            if (sobel.imageData != IntPtr.Zero)
            {
                openCV.cvlib.CvReleaseImage(ref sobel);
            }
            return result;
        }
        ]]>
        </Reduce>
        <ReduceFinalize>
          <![CDATA[
          public void ReduceFinalize() { }
        ]]>
        </ReduceFinalize>
      </MapReduce>
    </Job>   
    <Job Name="Post-processing" Custodian="" email="">
      <IOSettings>
        <JobType>remote</JobType>
        <DFS_IO>
          <DFSReader></DFSReader>
          <DFSWriter>dfs://regression_test_cvlib.CvSobel_Output2.blob</DFSWriter>
        </DFS_IO>
      </IOSettings>
      <Remote>
        <![CDATA[
          public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
          {                            
                string pic64 = @"Qk1mDAAAAAAAADYAAAAoAAAAIgAAAB4AAAABABgAAAAAAAAAAADEDgAAxwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
                
                byte[] data = Convert.FromBase64String(pic64);
                string imgName = "sobel.bmp";
                Blob blob = Blob.Prepare(imgName, data);                
                dfsoutput.WriteBinary(blob);          
           }
        ]]>
      </Remote>
    </Job>
    <Job Name="Post-processing" Custodian="" email="">      
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            //Compare input and output file, pass if they are the same.
            Shell(@"Qizmt exec regression_test_checkTestResult.xml regression_test_cvlib.CvSobel_Output.blob regression_test_cvlib.CvSobel_Output2.blob regression_test_cvlib.CvSobel.xml");          
            
            Shell(@"Qizmt -dfs del regression_test_cvlib.CvSobel_Input.blob");
            Shell(@"Qizmt -dfs del regression_test_cvlib.CvSobel_Output.blob");
            Shell(@"Qizmt -dfs del regression_test_cvlib.CvSobel_Output2.blob");
        }
        ]]>
      </Local>
    </Job>
  </Jobs>
</SourceCode>
