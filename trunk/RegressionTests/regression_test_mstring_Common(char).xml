<SourceCode>
	<Jobs>
		<Job>
			<Narrative>
				<Name>regression_test_mstring_Common(char)_Preprocessing</Name>
				<Custodian></Custodian>
				<email></email>
			</Narrative>
			<IOSettings>
				<JobType>local</JobType>
			</IOSettings>
			<Local>
				<![CDATA[
        public virtual void Local()
        {
            Shell(@"Qizmt del regression_test_mstring_Common(char)_Input.txt", true);
            Shell(@"Qizmt del regression_test_mstring_Common(char)_Output.txt", true);    
        }
        ]]>
			</Local>
		</Job>
		<Job description="Create sample data">
			<Narrative>
				<Name>regression_test_mstring_Common(char)_CreateSampleData</Name>
				<Custodian></Custodian>
				<email></email>
			</Narrative>
			<IOSettings>
				<JobType>remote</JobType>
				<DFS_IO>
					<DFSReader></DFSReader>
					<DFSWriter>dfs://regression_test_mstring_Common(char)_Input.txt</DFSWriter>
				</DFS_IO>
			</IOSettings>
			<Remote>
				<![CDATA[
          public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
          {             
                //Create sample data.
                int stringLength = 1;
                int rowCount = 2000;
                char del = ',';
                               
                Random rnd = new Random(System.DateTime.Now.Millisecond / 2 + System.Diagnostics.Process.GetCurrentProcess().Id / 2);
            
                List<byte> onerow = new List<byte>();
                
                for(long rn = 0; rn < rowCount; rn++)
                {
                    onerow.Clear();
                    
                    //string  
                    int cnt = 0;
                    while(cnt < stringLength)
                    {
                        byte b = (byte)rnd.Next((int)' ' + 1, (int)'~' + 1);   
                        
                        if(b != (byte)del)
                        {
                            onerow.Add(b);   
                            cnt++;
                        }
                    }      
                    
                    //string  
                    cnt = 0;
                    while(cnt < stringLength)
                    {
                        byte b = (byte)rnd.Next((int)' ' + 1, (int)'~' + 1);   
                        
                        if(b != (byte)del)
                        {
                            onerow.Add(b);   
                            cnt++;
                        }
                    }            
                    
                    dfsoutput.WriteLine(onerow);        
                }     
           }
        ]]>
			</Remote>
		</Job>
		<Job>
			<Narrative>
				<Name>mstring.AppendM(char)</Name>
				<Custodian></Custodian>
				<email></email>
			</Narrative>
			<IOSettings>
				<JobType>mapreduce</JobType>
				<KeyLength>1</KeyLength>
				<DFSInput>dfs://regression_test_mstring_Common(char)_Input.txt</DFSInput>
				<DFSOutput>dfs://regression_test_mstring_Common(char)_Output.txt</DFSOutput>
				<OutputMethod>sorted</OutputMethod>
			</IOSettings>
			<MapReduce>
				<Map>
					<![CDATA[
          public virtual void Map(ByteSlice line, MapOutput output)
          {   
              
              int j = 0;
              char c;
              char c2;
              string s;
              mstring sLine,val;
              mstring space = mstring.Prepare(' ');
              string space1 = " ";
              
              
              
              if ( j % 2 == 0)
              {
                sLine = mstring.Prepare(line);
                s = sLine.ToString();           //mstring.ToString() test
                c = s[0];
                c2 = s[1];
                val = mstring.Prepare(c);    //mstring.Prepare(char) test
                val = val.AppendM(c2);       //mstring.AppendM(char) test
                val.AppendM(' ');                 //mstring.AppendM(char) test
                if(val.HasNextItem())           //mstring.HasNextItem() test
                if(val.Contains(' '))               //mstring.Contains(char) test
                if(val.EndsWith(space))       //mstring.EndsWith(mstring) test
                val.TrimM();                         //mstring.TrimM(char) test - mapper
                j++;
              }
              else
              {
                 sLine = mstring.Prepare(line);
                 s = sLine.ToString();            //mstring.ToString() test
                 c = s[0];
                 c2 = s[1]; 
                 val = mstring.Prepare();       //mstring.Prepare(char) test
                 val = val.Consume(ref c);     //mstring.Consume(char) test
                 val.MAppend(c2);                 //mstring.MAppend(char) test
                 val.AppendM(' ');                  //mstring.AppendM(char) test
                 val.ReplaceM(' ','m');             //mstring.ReplaceM(char_char) test
                 val.MReplace('m',' ');             //mstring.MReplace(char_char) test
                 if(val.Contains(' '))               //mstring.Contains(char) test
                 if(val.EndsWith(space1))      //mstring.EndsWith(string) test
                 val.MTrim();                          //mstring.MTrim(char) test - mapper
                  j++;
              }
                output.Add(mstring.Prepare(c), val);               
          }
        ]]>
				</Map>
				<ReduceInitialize>
					<![CDATA[
          public void ReduceInitialize() { }
        ]]>
				</ReduceInitialize>
				<Reduce>
					<![CDATA[
          public override void Reduce(ByteSlice key, ByteSliceList values, ReduceOutput output)
          {                          
              char c;
              char c2;
              mstring val,sLine;
              string s;
              
              for(int i = 0; i < values.Length; i++)
                {
                               
                    if(i % 2 == 0)
                    {
                    sLine = mstring.Prepare(values.Items[i]);   
                    s = sLine.ToString();                         // mstring.ToString() test
                    c = s[0];
                    c2 = s[1];
                    val = mstring.Prepare(c);                  // mstring.Prepare(char) test
                    val = val.AppendM(c2);                     // mstring.AppendM(char)  test
                    val.AppendM(" ");                             // mstring.AppendM(string) test
                    val.TrimM();                                       //  mstring.TrimM(char) test - reducer
                    output.Add(val);
                    }
                    else
                    {
                    sLine = mstring.Prepare(values.Items[i]);   
                    s = sLine.ToString();                           //mstring.ToString() test
                    c = s[0];
                    c2 = s[1];
                    val =mstring.Prepare();                      // mstring.Prepare(char) test
                    val = val.Consume(ref c);                   // mstring.Consume(char) test
                    val.MAppend(c2);                               // mstring.MAppendM(char) test
                    val.AppendM(" ");                              
                    val.MTrim();                                        // mstring.MTrim(char) test - reducer
                    output.Add(val);
                        
                    }
                    
                }                        
          }
        ]]>
				</Reduce>
				<ReduceFinalize>
					<![CDATA[
          public void ReduceFinalize() { }
        ]]>
				</ReduceFinalize>
			</MapReduce>
		</Job>
		<Job>
			<Narrative>
				<Name>regression_test_mstring_Common(char)_post-processing</Name>
				<Custodian></Custodian>
				<email></email>
			</Narrative>
			<IOSettings>
				<JobType>local</JobType>
			</IOSettings>
			<Local>
				<![CDATA[
        public virtual void Local()
        {
            //Compare input and output file, pass if they are the same.
            Shell(@"Qizmt exec regression_test_checkTestResult.xml regression_test_mstring_Common(char)_Input.txt regression_test_mstring_Common(char)_Output.txt regression_test_mstring_Common(char).xml");     
            
           Shell(@"Qizmt del regression_test_mstring_Common(char)_Input.txt", true);
            Shell(@"Qizmt del regression_test_mstring_Common(char)_Output.txt", true); 
        }
        ]]>
			</Local>
		</Job>
	</Jobs>
</SourceCode>
