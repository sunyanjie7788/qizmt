<SourceCode>
  <Jobs>
    <Job Name="regression_test_DSpace_getParts_Preprocessing" Custodian="" Email="">
      <IOSettings>
        <JobType>local</JobType>
        <!--<LocalHost>localhost</LocalHost>-->
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            Shell(@"Qizmt del regression_test_DSpace_getParts_*.txt");
            string sBlockBaseSize = Shell("Qizmt clusterconfigview Mrdfs_BlockBaseSize").Trim();
            int BlockBaseSize = int.Parse(sBlockBaseSize);
            Shell(@"Qizmt gen regression_test_DSpace_getParts_Input.txt " + ((int)((double)BlockBaseSize * 1.5)).ToString() + " writers=2");
            
            string[] rr = Shell(@"Qizmt info regression_test_DSpace_getParts_Input.txt").Split('\n');
            string line = rr[4];
            int del = line.IndexOf(':');
            string sparts = line.Substring(del+1);
            int parts = Int32.Parse(sparts);
            Qizmt_Log(parts.ToString());
            
            string dir = IOUtils.GetTempDirectory() + @"\regression_test_DSpace_getParts";
            if(System.IO.Directory.Exists(dir))
            {
                System.IO.Directory.Delete(dir, true);
            }
            System.IO.Directory.CreateDirectory(dir);            
            
            string fn = Guid.NewGuid().ToString();
            
            List<string> infns = new List<string>();
            
            for(int i=0; i<parts; i++)
            {
                string outfn = dir + @"\" + fn + "_" + i.ToString();
                string infn = "regression_test_DSpace_getParts_InputPart_" + i.ToString();
                
                Shell(@"Qizmt get parts=" + i.ToString() + "-" + i.ToString() + " regression_test_DSpace_getParts_Input.txt " + outfn);
                
                Shell(@"Qizmt put " + outfn + " " + infn);
                infns.Add(infn);
            }
            
            string cmd = "";
            foreach(string f in infns)
            {
                cmd = cmd + f + " ";
            } 
            
            Shell(@"Qizmt combine " + cmd + " +regression_test_DSpace_getParts_Output.txt");
            
            string f1 = dir + @"\regression_test_DSpace_getParts_Input.txt";
            string f2 = dir + @"\regression_test_DSpace_getParts_Output.txt";
            
            Shell(@"Qizmt get regression_test_DSpace_getParts_Input.txt " + f1);
            Shell(@"Qizmt get regression_test_DSpace_getParts_Output.txt " + f2);
            
            if(CompareFiles(f1, f2))
            {
                Shell(@"Qizmt exec regression_test_writePASSFAIL.xml regression_test_DSpace_getParts.xml 1");
            }
            else
            {
                Shell(@"Qizmt exec regression_test_writePASSFAIL.xml regression_test_DSpace_getParts.xml 1");
            }
            
            System.IO.Directory.Delete(dir, true);
            Shell(@"Qizmt del regression_test_DSpace_getParts_*");
        }
        
        private static bool CompareFiles(string f1, string f2)
        {
            System.IO.FileInfo info1 = new System.IO.FileInfo(f1);
            System.IO.FileInfo info2 = new System.IO.FileInfo(f2);
            if (info1.Length != info2.Length)
            {
                return false;
            }

            System.IO.FileStream fs1 = new System.IO.FileStream(f1, System.IO.FileMode.Open);
            System.IO.FileStream fs2 = new System.IO.FileStream(f2, System.IO.FileMode.Open);
            bool ok = true;
            for (int i = 0; i < info1.Length; i++)
            {
                int b1 = fs1.ReadByte();
                int b2 = fs2.ReadByte();
                if (b1 != b2)
                {
                    ok = false;
                    break;
                }
            }

            fs1.Close();
            fs2.Close();
            return ok;
        }
        ]]>
      </Local>
    </Job>
  </Jobs>
</SourceCode>
