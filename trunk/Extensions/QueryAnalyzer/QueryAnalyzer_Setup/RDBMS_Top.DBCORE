<SourceCode>
  <Jobs>
    <Job Name="RDBMS_Top">
      <IOSettings>
        <JobType>remote</JobType>
        <DFS_IO>
          <DFSReader></DFSReader>
          <DFSWriter></DFSWriter>
        </DFS_IO>
        <Setting name="//MaxUserLogs" value="1000000" />
      </IOSettings>
      <ForceStandardError/>
      <Add Reference="RDBMS_DBCORE.dll" Type="dfs"/>
      <Using>RDBMS_DBCORE</Using>
      <Remote>
        <![CDATA[
            
            class RemoteInputEnum: IEnumerator<ByteSlice>
            {
                internal RemoteInputEnum(RemoteInputStream dfsinput)
                {
                    this.dfsinput = dfsinput;
                }
                
                public ByteSlice Current
                {
                    get
                    {
                        if(null == buf || hitend)
                        {
                            throw new InvalidOperationException();
                        }
                        return ByteSlice.Prepare(buf);
                    }
                }
                
                public void Dispose()
                {
                    dfsinput = null;
                    buf = null;
                }
                
                object System.Collections.IEnumerator.Current
                {
                    get
                    {
                        return Current;
                    }
                }

                public bool MoveNext()
                {
                    if(null == buf)
                    {
                        buf = new List<byte>();
                    }
                    buf.Clear();
                    if(DSpace_InputRecordLength > 0)
                    {
                        if(!dfsinput.ReadRecordAppend(buf))
                        {
                            hitend = true;
                            return false;
                        }
                        return true;
                    }
                    else
                    {
                        if(!dfsinput.ReadLineAppend(buf))
                        {
                            hitend = true;
                            return false;
                        }
                        return true;
                    }
                }
                
                public void Reset()
                {
                    throw new NotSupportedException();
                    //dfsinput.Seek(); // ...
                    //buf = null;
                    //hitend = false;
                }
                
                RemoteInputStream dfsinput;
                List<byte> buf = null;
                bool hitend = false;
            }
        
            public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
            {
                
                Qa.TopRemote qaremote = new Qa.TopRemote();
                qaremote.DSpace_InputRecordLength = DSpace_InputRecordLength;
                qaremote.DSpace_OutputRecordLength = DSpace_OutputRecordLength;
                qaremote.DSpace_ProcessID = DSpace_ProcessID;
                qaremote.Init(DSpace_ExecArgs);
                
                RemoteInputEnum qainput = new RemoteInputEnum(dfsinput);
                
                qaremote.OnRemote(qainput, dfsoutput);
                
                DSpace_Log(qaremote.ReadToEnd());
                
            }
            
        ]]>
      </Remote>
    </Job>
  </Jobs>
</SourceCode>
