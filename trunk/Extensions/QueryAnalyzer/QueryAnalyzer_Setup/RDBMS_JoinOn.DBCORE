<SourceCode>
  <Jobs>
    <Job Name="RDBMS_JoinOn">
      <IOSettings>
        <JobType>mapreduce</JobType>
        <KeyLength>1</KeyLength>
        <DFSInput></DFSInput>
        <DFSOutput></DFSOutput>
        <OutputMethod>grouped</OutputMethod>
		<Setting name="Subprocess_TotalPrime" value="NearPrimeBelowCoreCount" />
      </IOSettings>
      <FaultTolerantExecution>
        <Mode>disabled</Mode>
        <MapInputOrder>shuffle</MapInputOrder>
      </FaultTolerantExecution>
      <ForceStandardError/>
      <DynamicFoil/>
      <IntermediateDataAddressing>64</IntermediateDataAddressing>
      <Add Reference="RDBMS_DBCORE.dll" Type="dfs"/>
      <Using>RDBMS_DBCORE</Using>
      <MapReduce>
        <Map>
          <![CDATA[
            
            Qa.JoinOnMap selmap = null;
            
            
            // Specific to JoinOn.
            string[] TableFileNames;
            int _GetTableIndexByName()
            {
                for (int it = 0; it < TableFileNames.Length; it++)
                {
                    if (object.ReferenceEquals(TableFileNames[it], StaticGlobals.DSpace_InputFileName))
                    {
                        return it;
                    }
                }
                for (int it = 0; it < TableFileNames.Length; it++)
                {
                    int indexIFN = 0;
                    if (StaticGlobals.DSpace_InputFileName.StartsWith("dfs://", StringComparison.OrdinalIgnoreCase))
                    {
                        indexIFN = 6;
                    }
                    if (0 == string.Compare(TableFileNames[it], 0, StaticGlobals.DSpace_InputFileName, indexIFN, int.MaxValue, true))
                    {
                        TableFileNames[it] = StaticGlobals.DSpace_InputFileName;
                        return it;
                    }
                }
                throw new Exception("DEBUG:  Unable to get TableID for input file: " + StaticGlobals.DSpace_InputFileName);
            }
            
            
            public virtual void Map(ByteSlice row, MapOutput output)
            {
                if(null == selmap)
                {
                    {
                        // Specific to JoinOn.
                        string DfsTableFilesInput = DSpace_ExecArgs[6];
                        TableFileNames = DfsTableFilesInput.Split(';');
                        if (2 != TableFileNames.Length)
                        {
                            throw new Exception("DEBUG:  Invalid number of tables");
                        }
                        for (int it = 0; it < TableFileNames.Length; it++)
                        {
                            if (TableFileNames[it].StartsWith("dfs://", StringComparison.OrdinalIgnoreCase))
                            {
                                TableFileNames[it] = TableFileNames[it].Substring(6);
                            }
                            int iat = TableFileNames[it].IndexOf('@');
                            if (-1 != iat)
                            {
                                TableFileNames[it] = TableFileNames[it].Substring(0, iat);
                            }
                        }
                    }
                    
                    selmap = new Qa.JoinOnMap();
                    selmap.DSpace_KeyLength = DSpace_KeyLength;
                    selmap.DSpace_ProcessID = DSpace_ProcessID;
                    selmap.DSpace_ProcessCount = DSpace_ProcessCount;
                    selmap.Init(DSpace_ExecArgs);
                }
                
                selmap.MapInputFileIndex = _GetTableIndexByName();
                
                selmap.Map(row, output);
            }
			
        ]]>
        </Map>
		  <ReduceInitialize>
			  <![CDATA[
	            
				Qa.JoinOnReduce selreduce = null;

				public void ReduceInitialize()
				{
					selreduce = new Qa.JoinOnReduce();
					selreduce.DSpace_KeyLength = DSpace_KeyLength;
					selreduce.DSpace_ProcessID = DSpace_ProcessID;
					selreduce.DSpace_ProcessCount = DSpace_ProcessCount;
					selreduce.DSpace_OutputRecordLength = DSpace_OutputRecordLength;
					selreduce.Init(DSpace_ExecArgs);
	                
					selreduce.ReduceInitialize();
				}
	            
		  ]]>
		  </ReduceInitialize>
		  <Reduce>
			  <![CDATA[
          
			  class SelOutput:Qa.MapReduceOutput
			  {
				  public ReduceOutput output;
	              
				  public override void Add(ByteSlice x)
				  {
					  output.Add(x);
				  }
			  }
	          
			  SelOutput selreduceout = null;
	          
			  public override void Reduce(ByteSlice key, ByteSliceList values, ReduceOutput output)
			  {
				  if(null == selreduceout)
				  {
					  selreduceout = new SelOutput();
				  }
				  selreduceout.output = output;
	              
				  selreduce.Reduce(key, values, selreduceout);
			  }
	          
			]]>
		  </Reduce>
		  <ReduceFinalize>
			  <![CDATA[
                
                public void ReduceFinalize()
                {
                    
                    selreduce.ReduceFinalize();
                    
                    DSpace_Log(selreduce.ReadToEnd());
                    
                }
                
          ]]>
		  </ReduceFinalize>
      </MapReduce>
    </Job>
  </Jobs>
</SourceCode>
