<SourceCode>
  <Jobs>
    <Job Name="regression_test_maxDGlobals_Preprocessing" Custodian="" Email="">
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            Shell(@"Qizmt del regression_test_maxDGlobals_Input.txt");
            Shell(@"Qizmt del regression_test_maxDGlobals_Output.txt");
            
            string dir = @"\\" + StaticGlobals.Qizmt_Hosts[0] + @"\c$\temp\qizmt\regressionTestMaxDGlobals\";
            if(!System.IO.Directory.Exists(dir))
            {
                System.IO.Directory.CreateDirectory(dir);
            }
            
            int maxDGlobals = StaticGlobals.Qizmt_MaxDGlobals;
            
            for(int i = 0; i < maxDGlobals + 10; i++)
            {
                DGlobals.Add(i.ToString(), "a" + i.ToString());
            }
            
            for(int i = 0; i < maxDGlobals + 10; i++)
            {
                DGlobals.Add(i.ToString(), "b" + i.ToString());
            }
            
            {                
                System.IO.StreamWriter writer = new System.IO.StreamWriter(dir + "vars.txt");
                for(int i = 0; i < maxDGlobals + 10; i++)
                {
                    DGlobals.Add(i.ToString(), "c" + i.ToString());
                    
                    if(i < maxDGlobals)
                    {
                        writer.WriteLine(i.ToString() + ":" + "c" + i.ToString());
                    }                    
                }
                writer.Close();
            }
            
            {
                string[] _allkeys = DGlobals.GetAllKeys();        
                List<string> allkeys = new List<string>(_allkeys);
                System.IO.StreamWriter writer = new System.IO.StreamWriter(dir + "local.txt");
                foreach(string k in allkeys)
                {
                    writer.WriteLine(k + ":" + DGlobals.Get(k));
                }
                writer.Close();
            }            
        }
        ]]>
      </Local>
    </Job>
    <Job Name="regression_test_DGlobals_CreateSampleData" Custodian="" Email="" Description="Create sample data">
      <IOSettings>
        <JobType>remote</JobType>
        <DFS_IO>
          <DFSReader></DFSReader>
          <DFSWriter>dfs://regression_test_maxDGlobals_Input.txt</DFSWriter>
        </DFS_IO>
      </IOSettings>
      <Remote>
        <![CDATA[
          public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
          {             
                dfsoutput.WriteLine("xxx");
                dfsoutput.WriteLine("yyy");
                dfsoutput.WriteLine("zzz");
                
                string[] _allkeys = DGlobals.GetAllKeys();        
                List<string> allkeys = new List<string>(_allkeys);
                string dir = @"\\" + StaticGlobals.Qizmt_Hosts[0] + @"\c$\temp\qizmt\regressionTestMaxDGlobals\";
                System.IO.StreamWriter writer = new System.IO.StreamWriter(dir + "remote.txt");
                foreach(string k in allkeys)
                {
                    writer.WriteLine(k + ":" + DGlobals.Get(k));
                }
                writer.Close();
          }
        ]]>
      </Remote>
    </Job>
    <Job Name="regression_test_DGlobals" Custodian="" Email="">
      <IOSettings>
        <JobType>mapreduce</JobType>
        <KeyLength>3</KeyLength>
        <DFSInput>dfs://regression_test_maxDGlobals_Input.txt</DFSInput>
        <DFSOutput>dfs://regression_test_maxDGlobals_Output.txt</DFSOutput>
        <OutputMethod>sorted</OutputMethod>
      </IOSettings>
      <MapReduce>
        <Map>
          <![CDATA[
          public virtual void Map(ByteSlice line, MapOutput output)
          {
                string[] _allkeys = DGlobals.GetAllKeys();        
                List<string> allkeys = new List<string>(_allkeys);
                string dir = @"\\" + StaticGlobals.Qizmt_Hosts[0] + @"\c$\temp\qizmt\regressionTestMaxDGlobals\";
                System.IO.StreamWriter writer = new System.IO.StreamWriter(dir + "map.txt");
                foreach(string k in allkeys)
                {
                    writer.WriteLine(k + ":" + DGlobals.Get(k));
                }
                writer.Close();
                
                output.Add(line, ByteSlice.Prepare());                
          }
        ]]>
        </Map>
        <Reduce>
          <![CDATA[
          public override void Reduce(ByteSlice key, ByteSliceList values, ReduceOutput output)
          {
              for(int i = 0; i < values.Length; i++)
              {
                  output.Add(key);
              }
              
                string[] _allkeys = DGlobals.GetAllKeys();        
                List<string> allkeys = new List<string>(_allkeys);
                string dir = @"\\" + StaticGlobals.Qizmt_Hosts[0] + @"\c$\temp\qizmt\regressionTestMaxDGlobals\";
                System.IO.StreamWriter writer = new System.IO.StreamWriter(dir + "reduce.txt");
                foreach(string k in allkeys)
                {
                    writer.WriteLine(k + ":" + DGlobals.Get(k));
                }
                writer.Close();
          }
        ]]>
        </Reduce>
      </MapReduce>
    </Job>
    <Job Name="regression_test_maxDGlobals_Preprocessing" Custodian="" Email="">
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            string dir = @"\\" + StaticGlobals.Qizmt_Hosts[0] + @"\c$\temp\qizmt\regressionTestMaxDGlobals\";            
                  
            bool ok = CompareFiles(dir + "vars.txt", dir + "local.txt");
            if(ok)
            {
                ok = CompareFiles(dir + "vars.txt", dir + "remote.txt");
                if(ok)
                {
                    ok = CompareFiles(dir + "vars.txt", dir + "map.txt");
                    if(ok)
                    {
                        ok = CompareFiles(dir + "vars.txt", dir + "reduce.txt");                       
                    }
                }
            }
            
            if(ok)
            {
                Shell(@"Qizmt exec regression_test_writePASSFAIL.xml regression_test_maxDGlobals.xml 1");
            }
            else
            {
                Shell(@"Qizmt exec regression_test_writePASSFAIL.xml regression_test_maxDGlobals.xml 0");
            }
            
            System.IO.File.Delete(dir + "local.txt");
            System.IO.File.Delete(dir + "remote.txt");
            System.IO.File.Delete(dir + "map.txt");
            System.IO.File.Delete(dir + "reduce.txt"); 
            System.IO.File.Delete(dir + "vars.txt"); 
            Shell(@"Qizmt del regression_test_maxDGlobals_Input*.txt");
            Shell(@"Qizmt del regression_test_maxDGlobals_Output*.txt");
        }
        
        private static bool CompareFiles(string f1, string f2)
        {
            System.IO.FileInfo info1 = new System.IO.FileInfo(f1);
            System.IO.FileInfo info2 = new System.IO.FileInfo(f2);
            if (info1.Length != info2.Length)
            {
                return false;
            }

            System.IO.FileStream fs1 = new System.IO.FileStream(f1, System.IO.FileMode.Open);
            System.IO.FileStream fs2 = new System.IO.FileStream(f2, System.IO.FileMode.Open);
            bool ok = true;
            for (int i = 0; i < info1.Length; i++)
            {
                int b1 = fs1.ReadByte();
                int b2 = fs2.ReadByte();
                if (b1 != b2)
                {
                    ok = false;
                    break;
                }
            }

            fs1.Close();
            fs2.Close();
            return ok;
        }
        ]]>
      </Local>
    </Job>
  </Jobs>
</SourceCode>
