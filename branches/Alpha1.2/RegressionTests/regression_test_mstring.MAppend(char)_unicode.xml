<SourceCode>
  <Jobs>
    <Job>
      <Narrative>
        <Name>regression_test_mstring.MAppend(char)_unicode_Preprocessing</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            Shell(@"Qizmt del regression_test_mstring.MAppend(char)_unicode_Input.txt", true);
            Shell(@"Qizmt del regression_test_mstring.MAppend(char)_unicode_Output.txt", true);    
        }
        ]]>
      </Local>
    </Job>
    <Job description="Create sample data">
      <Narrative>
        <Name>regression_test_mstring.MAppend(char)_unicode_CreateSampleData</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>remote</JobType>
        <DFS_IO>
          <DFSReader></DFSReader>
          <DFSWriter>dfs://regression_test_mstring.MAppend(char)_unicode_Input.txt</DFSWriter>
        </DFS_IO>
      </IOSettings>
      <Remote>
        <![CDATA[
          public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
          {             
                //Create sample data.
                int stringLength = 1000;
                int rowCount = 10000;
                               
                Random rnd = new Random(System.DateTime.Now.Millisecond / 2 + System.Diagnostics.Process.GetCurrentProcess().Id / 2);
            
                List<byte> onerow = new List<byte>();
                                
                for(long rn = 0; rn < rowCount; rn++)
                {
                    onerow.Clear();
                    
                    //string
                    for (int cnt = 0; cnt < stringLength; cnt++)
                    {
                        int codeValue = rnd.Next(0x20, 0xFFEF);
                        byte b0 = 0;
                        byte b1 = 0;
                        byte b2 = 0;
                        byte b3 = 0;

                        ConvertCodeValueToBytesUTF8(codeValue, ref b0, ref b1, ref b2, ref b3);
                        
                        if (b0 != 0)
                        {
                            onerow.Add(b0);
                        }

                        if (b1 != 0)
                        {
                            onerow.Add(b1);
                        }

                        if (b2 != 0)
                        {
                            onerow.Add(b2);
                        }

                        if (b3 != 0)
                        {
                            onerow.Add(b3);
                        }
                    }    
                                        
                    dfsoutput.WriteLine(onerow);        
                }     
           }
           
        public static void ConvertCodeValueToBytesUTF8(int codeValue, ref byte b0, ref byte b1, ref byte b2, ref byte b3)
        {
            b0 = 0;
            b1 = 0;
            b2 = 0;
            b3 = 0;

            if (0xD800 <= codeValue && codeValue <= 0xDFFF)
            {
                //These are surrogates, reserved for UTF16.
                return;
            }

            if (0 <= codeValue && codeValue <= 0x7F)
            {
                b0 = (byte)codeValue;               
            }
            else
            {
                if (0x80 <= codeValue && codeValue <= 0x7FF)
                {
                    byte t = (byte)(codeValue >> 6);
                    int x = t & (byte)0x1F;
                    x = x | (byte)0xC0;
                    b0 = (byte)x;

                    t = (byte)codeValue;
                    x = t & (byte)0x3F;
                    x = x | (byte)0x80;
                    b1 = (byte)x;
                }
                else
                {
                    if (0x800 <= codeValue && codeValue <= 0xFFFF)
                    {
                        byte t = (byte)(codeValue >> 12);
                        int x = t & (byte)0x0F;
                        x = x | (byte)0xE0;
                        b0 = (byte)x;

                        t = (byte)(codeValue >> 6);
                        x = t & (byte)0x3F;
                        x = x | (byte)0x80;
                        b1 = (byte)x;

                        t = (byte)codeValue;
                        x = t & (byte)0x3F;
                        x = x | (byte)0x80;
                        b2 = (byte)x;
                    }
                    else
                    {
                        if (0x10000 <= codeValue && codeValue <= 0x10FFFF)
                        {
                            byte t = (byte)(codeValue >> 18);
                            int x = t & (byte)0x07;
                            x = x | (byte)0xF0;
                            b0 = (byte)x;

                            t = (byte)(codeValue >> 12);
                            x = t & (byte)0x3F;
                            x = x | (byte)0x80;
                            b1 = (byte)x;

                            t = (byte)(codeValue >> 6);
                            x = t & (byte)0x3F;
                            x = x | (byte)0x80;
                            b2 = (byte)x;

                            t = (byte)codeValue;
                            x = t & (byte)0x3F;
                            x = x | (byte)0x80;
                            b3 = (byte)x;
                        }
                    }
                }
            }
        }
        ]]>
      </Remote>
    </Job>
    <Job>
      <Narrative>
        <Name>mstring.MAppend(char)_unicode</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>mapreduce</JobType>
        <KeyLength>4</KeyLength>
        <DFSInput>dfs://regression_test_mstring.MAppend(char)_unicode_Input.txt</DFSInput>
        <DFSOutput>dfs://regression_test_mstring.MAppend(char)_unicode_Output.txt</DFSOutput>
        <OutputMethod>sorted</OutputMethod>
      </IOSettings>
      <MapReduce>
        <Map>
          <![CDATA[
          public virtual void Map(ByteSlice line, MapOutput output)
          {
                string sLine = line.ToString(); 
                char c = sLine[sLine.Length - 2];
                char c2 = sLine[sLine.Length - 1];
                mstring val = mstring.Prepare(sLine.Substring(0, sLine.Length -2));
                val = val.MAppend(c).MAppend(c2);
                output.Add(mstring.Prepare(c), val);               
          }
        ]]>
        </Map>
        <ReduceInitialize>
          <![CDATA[
          public void ReduceInitialize() { }
        ]]>
        </ReduceInitialize>
        <Reduce>
          <![CDATA[
          public override void Reduce(ByteSlice key, ByteSliceList values, ReduceOutput output)
          {                          
                for(int i = 0; i < values.Length; i++)
                {
                    string sLine = values.Items[i].ToString(); 
                    char c = sLine[sLine.Length - 2];
                    char c2 = sLine[sLine.Length - 1];
                    mstring val = mstring.Prepare(sLine.Substring(0, sLine.Length -2));
                    val = val.MAppend(c).MAppend(c2);
                    output.Add(val);                    
                }                        
          }
        ]]>
        </Reduce>
        <ReduceFinalize>
          <![CDATA[
          public void ReduceFinalize() { }
        ]]>
        </ReduceFinalize>
      </MapReduce>
    </Job>
    <Job>
      <Narrative>
        <Name>regression_test_mstring.MAppend(char)_unicode_post-processing</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            //Compare input and output file, pass if they are the same.
            Shell(@"Qizmt exec regression_test_checkTestResult.xml regression_test_mstring.MAppend(char)_unicode_Input.txt regression_test_mstring.MAppend(char)_unicode_Output.txt regression_test_mstring.MAppend(char)_unicode.xml unicode");          
            
            Shell(@"Qizmt del regression_test_mstring.MAppend(char)_unicode_Input.txt", true);
            Shell(@"Qizmt del regression_test_mstring.MAppend(char)_unicode_Output.txt", true); 
        }
        ]]>
      </Local>
    </Job>
  </Jobs>
</SourceCode>
