<SourceCode>
  <Jobs>
    <Job>
      <Narrative>
        <Name>regression_test_mstring.HasNextItem_Preprocessing</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            Shell(@"Qizmt del regression_test_mstring.HasNextItem(char)_Input.txt", true);
            Shell(@"Qizmt del regression_test_mstring.HasNextItem(char)_Output.txt", true);    
        }
        ]]>
      </Local>
    </Job>
    <Job description="Create sample data">
      <Narrative>
        <Name>regression_test_mstring.HasNextItem_CreateSampleData</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>remote</JobType>
        <DFS_IO>
          <DFSReader></DFSReader>
          <DFSWriter>dfs://regression_test_mstring.HasNextItem(char)_Input.txt</DFSWriter>
        </DFS_IO>
      </IOSettings>
      <Remote>
        <![CDATA[
          public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
          {                          
                //Create sample data.
                dfsoutput.WriteLine("a");                     
           }
        ]]>
      </Remote>
    </Job>
    <Job>
      <Narrative>
        <Name>mstring.HasNextItem</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>mapreduce</JobType>
        <KeyLength>1</KeyLength>
        <DFSInput>dfs://regression_test_mstring.HasNextItem(char)_Input.txt</DFSInput>
        <DFSOutput>dfs://regression_test_mstring.HasNextItem(char)_Output.txt</DFSOutput>
        <OutputMethod>sorted</OutputMethod>
      </IOSettings>
      <MapReduce>
        <Map>
          <![CDATA[
          public virtual void Map(ByteSlice line, MapOutput output)
          {  
              int ok = 0;
              
              //Test case
              {
                  mstring ms = mstring.Prepare("foo$333|car#");
                  if(ms.HasNextItem('|'))
                  {
                      mstring part = ms.NextItemToString('|');
                      if(part == mstring.Prepare("foo$333"))
                      {
                          if(ms.HasNextItem('|'))
                          {
                              part = ms.NextItemToString('|');
                              if(part == mstring.Prepare("car#"))
                              {
                                  ok++;
                              }
                          }
                      }
                  }
              }
              
              {
                  mstring ms = mstring.Prepare("foo,bar|car");
                  if(ms.HasNextItem(','))
                  {
                      mstring part = ms.NextItemToString(',');
                      if(part == mstring.Prepare("foo"))
                      {
                          if(ms.HasNextItem(','))
                          {
                              part = ms.NextItemToString(',');
                              if(part == mstring.Prepare("bar|car"))
                              {
                                  ok++;
                              }
                          }
                      }
                  }                  
              }
              
              {
                  mstring ms = mstring.Prepare("foo,234|car,,,12");
                  if(ms.HasNextItem(','))
                  {
                      mstring part = ms.NextItemToString(',');
                      if(part == mstring.Prepare("foo"))
                      {
                          if(ms.HasNextItem('|'))
                          {
                              int num = ms.NextItemToInt('|');
                              if(num == 234)
                              {
                                  if(ms.HasNextItem(','))
                                  {
                                      part = ms.NextItemToString(',');
                                      if(part == mstring.Prepare("car"))
                                      {
                                          if(!ms.HasNextItem(','))
                                          {
                                              ms.SkipToNextItem(',');
                                              if(!ms.HasNextItem(','))
                                              {
                                                  ms.SkipToNextItem(',');
                                                  if(ms.HasNextItem(','))
                                                  {
                                                      num = ms.NextItemToInt(',');
                                                      if(num == 12)
                                                      {
                                                          ok++;
                                                      }
                                                  }
                                              }
                                          }                                          
                                      }                                      
                                  }
                              }
                          }
                      }
                  }                  
              }
              
              {
                  mstring ms = mstring.Prepare("foo,234|car,,");
                  if(ms.HasNextItem(','))
                  {
                      mstring part = ms.NextItemToString(',');
                      if(part == mstring.Prepare("foo"))
                      {
                          if(ms.HasNextItem('|'))
                          {
                              int num = ms.NextItemToInt('|');
                              if(num == 234)
                              {
                                  if(ms.HasNextItem(','))
                                  {
                                      part = ms.NextItemToString(',');
                                      if(part == mstring.Prepare("car"))
                                      {
                                          if(!ms.HasNextItem(','))
                                          {
                                              ms.SkipToNextItem(',');
                                              if(!ms.HasNextItem(','))
                                              {
                                                  ms.SkipToNextItem(',');
                                                  ok++;
                                              }
                                          }                                          
                                      }                                      
                                  }
                              }
                          }
                      }
                  }                  
              }
              
              {
                  mstring ms = mstring.Prepare("||car,23##");
                  if(!ms.HasNextItem('|'))
                  {
                      ms.SkipToNextItem('|');
                      if(!ms.HasNextItem('|'))
                      {
                          ms.SkipToNextItem('|');
                          if(ms.HasNextItem(','))
                          {
                              mstring part = ms.NextItemToString(',');
                              if(part == mstring.Prepare("car"))
                              {
                                  if(ms.HasNextItem('#'))
                                  {
                                      int num = ms.NextItemToInt('#');
                                      if(num == 23)
                                      {
                                          if(!ms.HasNextItem('#'))
                                          {
                                              ms.SkipToNextItem('#');
                                              if(!ms.HasNextItem('#'))
                                              {
                                                  ok++;
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
              
              if(ok == 5)
              {
                  //Succeeded
                  output.Add(mstring.Prepare("a"), mstring.Prepare("a"));
              }
              else
              {
                  //Failed
                  output.Add(mstring.Prepare("x"), mstring.Prepare("x"));
              }
          }
        ]]>
        </Map>
        <ReduceInitialize>
          <![CDATA[
          public void ReduceInitialize() { }
        ]]>
        </ReduceInitialize>
        <Reduce>
          <![CDATA[
          public override void Reduce(ByteSlice key, ByteSliceList values, ReduceOutput output)
          {                                      
              output.Add(values[0].Value);                                     
          }
        ]]>
        </Reduce>
        <ReduceFinalize>
          <![CDATA[
          public void ReduceFinalize() { }
        ]]>
        </ReduceFinalize>
      </MapReduce>
    </Job>
    <Job>
      <Narrative>
        <Name>regression_test_mstring.HasNextItem_post-processing</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            //Compare input and output file, pass if they are the same.
            Shell(@"Qizmt exec regression_test_checkTestResult.xml regression_test_mstring.HasNextItem(char)_Input.txt regression_test_mstring.HasNextItem(char)_Output.txt regression_test_mstring.HasNextItem(char).xml");          
            
            Shell(@"Qizmt del regression_test_mstring.HasNextItem(char)_Input.txt", true);
            Shell(@"Qizmt del regression_test_mstring.HasNextItem(char)_Output.txt", true); 
        }
        ]]>
      </Local>
    </Job>
  </Jobs>
</SourceCode>
