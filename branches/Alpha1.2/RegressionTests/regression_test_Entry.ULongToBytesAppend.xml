<SourceCode>
  <Jobs>
    <Job>
      <Narrative>
        <Name>regression_test_Entry.ULongToBytesAppend_Preprocessing</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            Shell(@"Qizmt del regression_test_Entry.ULongToBytesAppend_Input.txt", true);
            Shell(@"Qizmt del regression_test_Entry.ULongToBytesAppend_Output.txt", true);
        }
        ]]>
      </Local>
    </Job>
    <Job description="Prepare sample data">
      <Narrative>
        <Name>regression_test_Entry.ULongToBytesAppend_PrepareSampleData</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>remote</JobType>
        <DFS_IO>
          <DFSReader></DFSReader>
          <DFSWriter>dfs://regression_test_Entry.ULongToBytesAppend_Input.txt</DFSWriter>
        </DFS_IO>
      </IOSettings>
      <Remote>
        <![CDATA[
          public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
          {             
                //Create sample data.
                int rowCount = 2000;
                char del = ',';
                               
                Random rnd = new Random(System.DateTime.Now.Millisecond / 2 + System.Diagnostics.Process.GetCurrentProcess().Id / 2);
                List<byte> onerow = new List<byte>();
                
                for(long rn = 0; rn < rowCount; rn++)
                {
                    onerow.Clear();
                    
                    //long 
                    ulong l = (ulong)(DateTime.Now.Ticks + (long)rnd.Next());
                   
                    string s = l.ToString();
                    byte[] buf = System.Text.Encoding.UTF8.GetBytes(s);
                    
                    foreach(byte b in buf)
                    {
                        onerow.Add(b);
                    }
                    
                    dfsoutput.WriteLine(onerow);        
                }
           }
        ]]>
      </Remote>
    </Job>
    <Job>
      <Narrative>
        <Name>Entry.ULongToBytesAppend</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>mapreduce</JobType>
        <KeyLength>2</KeyLength>
        <DFSInput>dfs://regression_test_Entry.ULongToBytesAppend_Input.txt</DFSInput>
        <DFSOutput>dfs://regression_test_Entry.ULongToBytesAppend_Output.txt</DFSOutput>
        <OutputMethod>sorted</OutputMethod>
      </IOSettings>
      <MapReduce>
        <Map>
          <![CDATA[
          public virtual void Map(ByteSlice line, MapOutput output)
          {
               string s = line.ToString();
               ulong x = ulong.Parse(s);
               
               List<byte> buf = new List<byte>();
               Entry.ULongToBytesAppend(x, buf);
                              
               int m = (int)(x % 10);
               ByteSlice key = ByteSlice.PreparePaddedStringAscii(m.ToString(), 2);
               ByteSlice val = ByteSlice.Prepare(buf);
               output.Add(key, val);
          }
        ]]>
        </Map>
        <ReduceInitialize>
          <![CDATA[
          public void ReduceInitialize() { }
        ]]>
        </ReduceInitialize>
        <Reduce>
          <![CDATA[
          public override void Reduce(ByteSlice key, ByteSliceList values, ReduceOutput output)
          {               
                for(int i = 0; i < values.Length; i++)
                {
                   ulong x = Entry.BytesToULong(values.Items[i].ToBytes());
                   List<byte> buf = new List<byte>();
                    Entry.ULongToBytesAppend(x, buf);
                    x = Entry.BytesToULong(buf);
                   string s = x.ToString();
                   ByteSlice val = ByteSlice.Prepare(s);
                   output.Add(val);
                }                        
          }
        ]]>
        </Reduce>
        <ReduceFinalize>
          <![CDATA[
          public void ReduceFinalize() { }
        ]]>
        </ReduceFinalize>
      </MapReduce>
    </Job>
    <Job>
      <Narrative>
        <Name>regression_test_Entry.ULongToBytesAppend_post-processing</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            //Compare input and output file, pass if they are the same.
            Shell(@"Qizmt exec regression_test_checkTestResult.xml regression_test_Entry.ULongToBytesAppend_Input.txt regression_test_Entry.ULongToBytesAppend_Output.txt regression_test_Entry.ULongToBytesAppend.xml");          
            
            Shell(@"Qizmt del regression_test_Entry.ULongToBytesAppend_Input.txt", true);
            Shell(@"Qizmt del regression_test_Entry.ULongToBytesAppend_Output.txt", true); 
        }
        ]]>
      </Local>
    </Job>
  </Jobs>
</SourceCode>
