<SourceCode>
  <Jobs>
    <Job Name="Preprocessing" Custodian="" email="">
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            Shell(@"Qizmt -dfs del regression_test_openCV_Moments_Input.blob");
            Shell(@"Qizmt -dfs del regression_test_openCV_Moments_Output.txt");
            Shell(@"Qizmt -dfs del regression_test_openCV_Moments_Output2.txt");
        }
        ]]>
      </Local>
    </Job>
    <Job Name="Create sample data" Custodian="" email="">      
      <IOSettings>
        <JobType>remote</JobType>
        <DFS_IO>
          <DFSReader></DFSReader>
          <DFSWriter>dfs://regression_test_openCV_Moments_Input.blob</DFSWriter>
        </DFS_IO>
      </IOSettings>
      <Remote>
        <![CDATA[
          public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
          {             
                //Create sample image.
                string pic64 = @"Qk1mDAAAAAAAADYAAAAoAAAAIgAAAB4AAAABABgAAAAAADAMAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wAA////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////AAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////////8AAAD///////////////////////////8AAP///////////////////////wAAAP///////////////////////////////////////////////////////////////////////////wAAAP///////////////////////////wAA////////////////////////AAAA////////////////////////////////////////////////////////////////////////////AAAA////////////////////////////AAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////////8AAAD///////////////////////////8AAP///////////////////////wAAAP///////////////////////////////////////////////////////////////////////////wAAAP///////////////////////////wAA////////////////////////AAAA////////////////////////////////////////////////////////////////////////////AAAA////////////////////////////AAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////////8AAAD///////////////////////////8AAP///////////////////////wAAAP///////////////////////////////////////////////////////////////////////////wAAAP///////////////////////////wAA////////////////////////AAAA////////////////////////////////////////////////////////////////////////////AAAA////////////////////////////AAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////////8AAAD///////////////////////////8AAP///////////////////////wAAAP///////////////////////////////////////////////////////////////////////////wAAAP///////////////////////////wAA////////////////////////AAAA////////////////////////////////////////////////////////////////////////////AAAA////////////////////////////AAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////////8AAAD///////////////////////////8AAP///////////////////////wAAAP///////////////////////////////////////////////////////////////////////////wAAAP///////////////////////////wAA////////////////////////AAAA////////////////////////////////////////////////////////////////////////////AAAA////////////////////////////AAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////////8AAAD///////////////////////////8AAP///////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////wAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wAA";
                
                byte[] data = Convert.FromBase64String(pic64);
                string imgName = "rectangle.bmp";
                Blob blob = Blob.Prepare(imgName, data);                
                dfsoutput.WriteBinary(blob);          
           }
        ]]>
      </Remote>
    </Job>
    <Job Name="M/R" Custodian="" email="">
       <OpenCVExtension/>      
      <IOSettings>
        <JobType>mapreduce</JobType>
        <KeyLength>260</KeyLength>
        <DFSInput>dfs://regression_test_openCV_Moments_Input.blob</DFSInput>
        <DFSOutput>dfs://regression_test_openCV_Moments_Output.txt</DFSOutput>
        <OutputMethod>sorted</OutputMethod>
      </IOSettings>
      <MapReduce>
        <Map>
          <![CDATA[
          public virtual void Map(ByteSlice line, MapOutput output)
          {
                Blob blob = line.ReadBinary();
                string imgName = blob.name;
                byte[] data = blob.data;
                
                mstring key = mstring.Prepare(imgName);
                recordset value = recordset.Prepare();
                value.PutBytes(data, 0, data.Length);
                
                output.Add(key, value);
          }
        ]]>
        </Map>
        <ReduceInitialize>
          <![CDATA[
          public void ReduceInitialize() { }
        ]]>
        </ReduceInitialize>
        <Reduce>
          <![CDATA[
          public override void Reduce(ByteSlice key, ByteSliceList values, ReduceOutput output)
          {
              string imgName = mstring.Prepare(UnpadKey(key)).ToString();
              byte[] data = values[0].Value.ToBytes();
              
              System.IO.MemoryStream mems = new System.IO.MemoryStream(data);
              System.Drawing.Bitmap srcBmp = new System.Drawing.Bitmap(mems);
              mems.Close();
              
             openCV.IplImage image = openCV.cvlib.ToIplImage(srcBmp, false);
             
            // color conversion if image hasnt one channel
            openCV.IplImage gray = openCV.cvlib.CvCreateImage(new openCV.CvSize(image.width, image.height), (int)openCV.cvlib.IPL_DEPTH_8U, 1);
            openCV.cvlib.CvCvtColor(ref image, ref gray, openCV.cvlib.CV_BGR2GRAY);

            // calculate all possible moments
            // take care that order follows the rule:
            // ox + oy <= 3, ox | oy >=0, ox <=3, oy <=3
            openCV.CvMoments moments = new openCV.CvMoments();
            openCV.CvHuMoments humoments = new openCV.CvHuMoments();
            openCV.cvlib.CvMoments(ref gray, ref moments, 0);
            
            mstring errmsg = mstring.Prepare("error");
            
            double sm = openCV.cvlib.CvGetSpatialMoment(ref moments, 1, 1);
            int err = openCV.cvlib.CvGetErrStatus();
            if(err != 0)
            {
                output.Add(errmsg);
                return;
            }
            double cm = openCV.cvlib.CvGetCentralMoment(ref moments, 1, 1);
            err = openCV.cvlib.CvGetErrStatus();
            if(err != 0)
            {
                output.Add(errmsg);
                return;
            }
            double ncm = openCV.cvlib.CvGetNormalizedCentralMoment(ref moments, 1, 1);
            err = openCV.cvlib.CvGetErrStatus();
            if(err != 0)
            {
                output.Add(errmsg);
                return;
            }
            openCV.cvlib.CvGetHuMoments(ref moments, ref humoments);
            err = openCV.cvlib.CvGetErrStatus();
            if(err != 0)
            {
                output.Add(errmsg);
                return;
            }

            // print moments
            mstring ms = mstring.Prepare();
            ms = ms.AppendM("m00=").AppendM(moments.m00);
            output.Add(ms);
            
            ms = mstring.Prepare();            
            ms = ms.AppendM("m01=").AppendM(moments.m01);
            output.Add(ms);
                        
            ms = mstring.Prepare();   
            ms = ms.AppendM("m02=").AppendM(moments.m02);
            output.Add(ms);
                        
            ms = mstring.Prepare();   
            ms = ms.AppendM("m03=").AppendM(moments.m03);
            output.Add(ms);
                        
            ms = mstring.Prepare();   
            ms = ms.AppendM("m10=").AppendM(moments.m10);
            output.Add(ms);
                        
            ms = mstring.Prepare();   
            ms = ms.AppendM("m11=").AppendM(moments.m11);
            output.Add(ms);
                        
            ms = mstring.Prepare();   
            ms = ms.AppendM("m12=").AppendM(moments.m12);
            output.Add(ms);
                        
            ms = mstring.Prepare();   
            ms = ms.AppendM("m20=").AppendM(moments.m20);
            output.Add(ms);
                        
            ms = mstring.Prepare();   
            ms = ms.AppendM("m21=").AppendM(moments.m21);
            output.Add(ms);
                        
            ms = mstring.Prepare();   
            ms = ms.AppendM("m30=").AppendM(moments.m30);
            output.Add(ms);
                        
            ms = mstring.Prepare();   
            ms = ms.AppendM("mu02=").AppendM(moments.mu02);
            output.Add(ms);
                        
            ms = mstring.Prepare();   
            ms = ms.AppendM("mu03=").AppendM(moments.mu03);
            output.Add(ms);
                        
            ms = mstring.Prepare();   
            ms = ms.AppendM("mu11=").AppendM(moments.mu11);
            output.Add(ms);
                        
            ms = mstring.Prepare();   
            ms =ms.AppendM("mu12=").AppendM(moments.mu12);
            output.Add(ms);
                         
            ms = mstring.Prepare();   
            ms = ms.AppendM("mu20=").AppendM(moments.mu20);
            output.Add(ms);
                         
            ms = mstring.Prepare();   
            ms = ms.AppendM("mu21=").AppendM(moments.mu21);
            output.Add(ms);
                         
            ms = mstring.Prepare();   
            ms = ms.AppendM("mu30=").AppendM(moments.mu30);
            output.Add(ms);
                         
            ms = mstring.Prepare();   
            ms = ms.AppendM("sm=").AppendM(sm);
            output.Add(ms);
                         
            ms = mstring.Prepare();   
            ms = ms.AppendM("cm=").AppendM(cm);
            output.Add(ms);
                         
            ms = mstring.Prepare();   
            ms = ms.AppendM("ncm=").AppendM(ncm);
            output.Add(ms);
                         
            ms = mstring.Prepare();   
            ms = ms.AppendM("hu1=").AppendM(humoments.hu1);
            output.Add(ms);
                         
            ms = mstring.Prepare();   
            ms = ms.AppendM("hu2=").AppendM(humoments.hu2);
            output.Add(ms);
                         
            ms = mstring.Prepare();   
            ms = ms.AppendM("hu3=").AppendM(humoments.hu3);
            output.Add(ms);
            
            openCV.cvlib.CvReleaseImage(ref image);
            openCV.cvlib.CvReleaseImage(ref gray);
            srcBmp = null;
          }
        ]]>
        </Reduce>
        <ReduceFinalize>
          <![CDATA[
          public void ReduceFinalize() { }
        ]]>
        </ReduceFinalize>
      </MapReduce>
    </Job>   
    <Job Name="Post-processing" Custodian="" email="">
      <IOSettings>
        <JobType>remote</JobType>
        <DFS_IO>
          <DFSReader>dfs://regression_test_openCV_Moments_Output.txt</DFSReader>
          <DFSWriter>dfs://regression_test_openCV_Moments_Output2.txt</DFSWriter>
        </DFS_IO>
      </IOSettings>
      <Remote>
        <![CDATA[
          public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
          {                            
                StringBuilder sb = new StringBuilder();
                                
                while(dfsinput.ReadLineAppend(sb))
                {
                    if(sb.ToString() != "error")
                    {
                        dfsoutput.WriteLine(sb);
                    }
                    sb.Length = 0;
                }
           }
        ]]>
      </Remote>
    </Job>
    <Job Name="Post-processing" Custodian="" email="">      
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            //Compare input and output file, pass if they are the same.
            Shell(@"Qizmt exec regression_test_checkTestResult.xml regression_test_openCV_Moments_Output.txt regression_test_openCV_Moments_Output2.txt regression_test_openCV_Moments.xml");          
            
            Shell(@"Qizmt -dfs del regression_test_openCV_Moments_Input.blob");
            Shell(@"Qizmt -dfs del regression_test_openCV_Moments_Output.txt");
            Shell(@"Qizmt -dfs del regression_test_openCV_Moments_Output2.txt");
        }
        ]]>
      </Local>
    </Job>
  </Jobs>
</SourceCode>
