<SourceCode>
  <Jobs>
    <Job>
      <Narrative>
        <Name>regression_test_mstring.MPadRight_Preprocessing</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            Shell(@"Qizmt del regression_test_mstring.MPadRight_Input.txt", true);
            Shell(@"Qizmt del regression_test_mstring.MPadRight_Output.txt", true);   
            Shell(@"Qizmt del regression_test_mstring.MPadRight_Output1.txt", true); 
            Shell(@"Qizmt del regression_test_mstring.MPadRight_Output2.txt", true); 
        }
        ]]>
      </Local>
    </Job>
    <Job description="Create sample data">
      <Narrative>
        <Name>regression_test_mstring.MPadRight_CreateSampleData</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>remote</JobType>
        <DFS_IO>
          <DFSReader></DFSReader>
          <DFSWriter>dfs://regression_test_mstring.MPadRight_Input.txt</DFSWriter>
        </DFS_IO>
      </IOSettings>
      <Remote>
        <![CDATA[
          public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
          {             
                //Create sample data.
                int stringLength = 0;
                int rowCount = 2000;
                               
                Random rnd = new Random(System.DateTime.Now.Millisecond / 2 + System.Diagnostics.Process.GetCurrentProcess().Id / 2);
            
                List<byte> onerow = new List<byte>();
                
                for(long rn = 0; rn < rowCount; rn++)
                {
                    onerow.Clear();
                    
                    //string        
                    stringLength = rnd.Next(1, 10);
                    for(int cnt = 0; cnt < stringLength; cnt++)
                    {
                        byte b = (byte)rnd.Next((int)' ' + 1, (int)'~' + 1);   
                        
                        onerow.Add(b);
                    }                          
                   
                    dfsoutput.WriteLine(onerow);        
                }     
           }
        ]]>
      </Remote>
    </Job>
    <Job>
      <Narrative>
        <Name>mstring.MPadRight</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>mapreduce</JobType>
        <KeyLength>1</KeyLength>
        <DFSInput>dfs://regression_test_mstring.MPadRight_Input.txt</DFSInput>
        <DFSOutput>dfs://regression_test_mstring.MPadRight_Output.txt</DFSOutput>
        <OutputMethod>sorted</OutputMethod>
      </IOSettings>
      <MapReduce>
        <Map>
          <![CDATA[
          public virtual void Map(ByteSlice line, MapOutput output)
          {
                string sLine = line.ToString();
                mstring ms = mstring.Prepare(line);
                mstring val = ms.MPadRight(20, 'x');
                
                output.Add(mstring.Prepare(sLine[0]), val);               
          }
        ]]>
        </Map>
        <ReduceInitialize>
          <![CDATA[
          public void ReduceInitialize() { }
        ]]>
        </ReduceInitialize>
        <Reduce>
          <![CDATA[
          public override void Reduce(ByteSlice key, ByteSliceList values, ReduceOutput output)
          {                          
                for(int i = 0; i < values.Length; i++)
                {  
                    mstring ms = mstring.Prepare(values.Items[i]);
                    mstring val = ms.MPadRight(40, 'y');
                    
                    output.Add(val);                   
                }                        
          }
        ]]>
        </Reduce>
        <ReduceFinalize>
          <![CDATA[
          public void ReduceFinalize() { }
        ]]>
        </ReduceFinalize>
      </MapReduce>
    </Job>
    <Job>
      <Narrative>
        <Name>regression_test_mstring.MPadRight_Imitate_Mapper</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>remote</JobType>
        <DFS_IO>
          <DFSReader>dfs://regression_test_mstring.MPadRight_Input.txt</DFSReader>
          <DFSWriter>dfs://regression_test_mstring.MPadRight_Output1.txt</DFSWriter>
        </DFS_IO>
      </IOSettings>
      <Remote>
        <![CDATA[
          public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
          {             
               StringBuilder sb = new StringBuilder();
               
               while(dfsinput.ReadLineAppend(sb))
               {
                   string line = sb.ToString();
                   string val = line.PadRight(20, 'x');
                   dfsoutput.WriteLine(val);
                   sb.Length = 0;
               }
           }
        ]]>
      </Remote>
    </Job>
    <Job>
      <Narrative>
        <Name>regression_test_mstring.MPadRight_Imitate_Reducer</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>remote</JobType>
        <DFS_IO>
          <DFSReader>dfs://regression_test_mstring.MPadRight_Output1.txt</DFSReader>
          <DFSWriter>dfs://regression_test_mstring.MPadRight_Output2.txt</DFSWriter>
        </DFS_IO>
      </IOSettings>
      <Remote>
        <![CDATA[
          public virtual void Remote(RemoteInputStream dfsinput, RemoteOutputStream dfsoutput)
          {             
               StringBuilder sb = new StringBuilder();
               
               while(dfsinput.ReadLineAppend(sb))
               {
                   string line = sb.ToString();
                   string val = line.PadRight(40, 'y');
                   dfsoutput.WriteLine(val);
                   sb.Length = 0;
               }
           }
        ]]>
      </Remote>
    </Job>
    <Job>
      <Narrative>
        <Name>regression_test_mstring.MPadRight_post-processing</Name>
        <Custodian></Custodian>
        <email></email>
      </Narrative>
      <IOSettings>
        <JobType>local</JobType>
      </IOSettings>
      <Local>
        <![CDATA[
        public virtual void Local()
        {
            //Compare input and output file, pass if they are the same.
            Shell(@"Qizmt exec regression_test_checkTestResult.xml regression_test_mstring.MPadRight_Output.txt regression_test_mstring.MPadRight_Output2.txt regression_test_mstring.MPadRight.xml");          
            
            Shell(@"Qizmt del regression_test_mstring.MPadRight_Input.txt", true);
            Shell(@"Qizmt del regression_test_mstring.MPadRight_Output.txt", true); 
            Shell(@"Qizmt del regression_test_mstring.MPadRight_Output1.txt", true); 
            Shell(@"Qizmt del regression_test_mstring.MPadRight_Output2.txt", true); 
        }
        ]]>
      </Local>
    </Job>
  </Jobs>
</SourceCode>
